applicationContext.xml

<
<?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation=" http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd ">
   
    <!-- Base package for checking the annotated classes -->
      <context:component-scan base-package="com.corePackage"/>

      <!-- Configure JDBC Connection-->
      <bean id="dataSource"  class="org.springframework.jdbc.datasource.DriverManagerDataSource">      		
            <property name="driverClassName" value="com.mysql.jdbc.Driver" />
            <property name="url" value="jdbc:mysql://localhost:3306/dbName" />
            <property name="username" value="root" />
            <property name="password" value="password"/>
      </bean>
     <!-- Configure Hibernate 4 Session Factory -->
      <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />         
        </property>
        <property name="annotatedClasses">
              <list>
                    <!-- Entity name -->
                    <value>com.jeeva.ClassName</value>
              </list>
        </property>
      </bean>
      
      <tx:annotation-driven/>
      <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
           <property name="sessionFactory" ref="sessionFactory" />  
      </bean> 
      <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
         <property name="maxUploadSize" value="100000000" />
      </bean>
    
    <!-- Spring Security -->
       <bean id="savedRequestAwareAuthenticationSuccessHandler"	class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
			<property name="targetUrlParameter" value="targetUrl" />
	  </bean>           
</beans>                         
>

Spring Security.xml file

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- enable use-expressions -->
	<http auto-config="true" use-expressions="true">
		<headers>
			<cache-control />
		</headers>
		
			<intercept-url pattern="/login" access="permitAll" />
			<intercept-url pattern="/welcome.html" access="hasAnyRole('ROLE_ADMIN','ROLE_FINANCE','ROLE_MARKETING','ROLE_DEPO','ROLE_AP2020')"/>		
			
		<form-login login-page="/login"
		    default-target-url="/welcome.html"
			authentication-failure-url="/login?error"
			username-parameter="username"
			password-parameter="password"
			login-processing-url="/auth/login_check"
			authentication-success-handler-ref="savedRequestAwareAuthenticationSuccessHandler" />

		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID" />
		<!-- enable csrf protection 
		<csrf />	-->
	</http>

	<!-- Select users and user_roles from database -->
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled,role_id from userlogin where username=?"
				authorities-by-username-query="select role_id,role_name,enabled from role where FIND_IN_SET(role_id, (SELECT role_id FROM userlogin WHERE username=?))" />
		</authentication-provider>
	</authentication-manager>
</beans:beans>


<!-- spring-servlet.xml  -->

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.0.xsd" >

	<!-- Enable annotation driven controllers, validation etc... -->
	<mvc:annotation-driven />
	<context:component-scan base-package="com.jeeva.controller" />
	
	<!-- Configure the scheduler -->
  	<task:annotation-driven />
	<bean id="fomsEvent" class="com.jeeva.task.Event"></bean>
	
	<bean id="viewResolver"	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/view/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
         <property name="basenames">
         	<list>
         		<value>classpath:ariesLabels</value>
         		<value>classpath:log4j</value>
         	</list>
         </property>	
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
    <bean id="viewResolver1"
        class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
        <property name="order" value="1"></property>
        <property name="basename" value="views"></property>
    </bean>
    <!-- css desing    -->  
    <mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:annotation-driven />
     
</beans>

<!-- web.xml file with spring security -->

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    
        <display-name>Aries Dealer Application</display-name>
        
        <!-- Servlet Configure And Mapping -->
        <servlet>
                <servlet-name>aries</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <load-on-startup>15</load-on-startup>
        </servlet>     
        <servlet-mapping>
                <servlet-name>aries</servlet-name>
                <url-pattern>/</url-pattern>
        </servlet-mapping>
        
       <welcome-file-list>
                <welcome-file>welcome.html</welcome-file>
        </welcome-file-list>
        <listener>
	        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
   	 	</listener>
		<!-- Configure Other XML files -->
        <context-param>
        	<param-name>contextConfigLocation</param-name>
        	<param-value>
        		/WEB-INF/ariesagro-security.xml
        		classpath:ariesApplicationContext.xml
        	</param-value>
    	</context-param> 
    	<!-- Session Set Time -->
    	 <session-config>
 			 <session-timeout>60</session-timeout>
		</session-config>
    	
    	<!-- Spring Security -->
		 <filter>
		    <filter-name>springSecurityFilterChain</filter-name>
		    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		</filter>

		<filter-mapping>
			<filter-name>springSecurityFilterChain</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping> 
</web-app>

<!-- pom.xml file -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>ADA</groupId>
  <artifactId>ADA</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>ADA Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <properties>
  		<jdk.version>1.7</jdk.version>
		<org.springframework.version>4.1.2.RELEASE</org.springframework.version>
		<spring.security.version>3.2.3.RELEASE</spring.security.version>
		<jstl.version>1.2</jstl.version>
		<mysql.connector.version>5.1.30</mysql.connector.version>
		<javax.servlet.version>3.1.0</javax.servlet.version>
  </properties>	
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
     <!--
	    Core utilities used by other modules.
	    Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Expression Language (depends on spring-core)
	    Define this if you use Spring Expression APIs (org.springframework.expression.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-expression</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Bean Factory and JavaBeans utilities (depends on spring-core)
	    Define this if you use Spring Bean APIs (org.springframework.beans.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-beans</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Aspect Oriented Programming (AOP) Framework (depends on spring-core, spring-beans)
	    Define this if you use Spring AOP APIs (org.springframework.aop.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans)
	    This is the central artifact for Spring's Dependency Injection Container and is generally always defined
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration
	    Define this if you need any of these integrations
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context)
	    Define this if you use Spring Transactions or DAO Exception Hierarchy
	    (org.springframework.transaction.*/org.springframework.dao.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-tx</artifactId>
	 	<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, spring-tx)
	    Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis.
	    (depends on spring-core, spring-beans, spring-context, spring-tx)
	    Define this if you need ORM (org.springframework.orm.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-orm</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Object-to-XML Mapping (OXM) abstraction and integration with JAXB, JiBX, Castor, XStream, and XML Beans.
	    (depends on spring-core, spring-beans, spring-context)
	    Define this if you need OXM (org.springframework.oxm.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-oxm</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Web application development utilities applicable to both Servlet and Portlet Environments
	    (depends on spring-core, spring-beans, spring-context)
	    Define this if you use Spring MVC, or wish to use Struts, JSF, or another web framework with Spring (org.springframework.web.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-web</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Spring MVC for Servlet Environments (depends on spring-core, spring-beans, spring-context, spring-web)
	    Define this if you use Spring MVC with a Servlet Container such as Apache Tomcat (org.springframework.web.servlet.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Spring MVC for Portlet Environments (depends on spring-core, spring-beans, spring-context, spring-web)
	    Define this if you use Spring MVC with a Portlet Container (org.springframework.web.portlet.*)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc-portlet</artifactId>
		<version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Support for testing Spring applications with tools such as JUnit and TestNG
	    This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>${org.springframework.version}</version>
		<scope>test</scope>
	</dependency>
	
	<!-- 
		Hibernate dependency
	 -->
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-core</artifactId>
		<version>4.2.7.Final</version>
	</dependency>
	
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>4.2.0.Final</version>
	</dependency>
	
	<!-- Spring Security -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-web</artifactId>
		<version>${spring.security.version}</version>
	</dependency>

	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-config</artifactId>
		<version>${spring.security.version}</version>
	</dependency>

	<!-- Spring Security JSP Taglib -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-taglibs</artifactId>
		<version>${spring.security.version}</version>
	</dependency>
	<!-- Commons dependency -->
	<!-- Apache Commons FileUpload -->
	<dependency>
	    <groupId>commons-fileupload</groupId>
	    <artifactId>commons-fileupload</artifactId>
	    <version>1.3.1</version>
	</dependency>
	 
	<!-- Apache Commons IO -->
	<dependency>
	    <groupId>commons-io</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>2.4</version>
	</dependency>
		
	<dependency>
		<groupId>commons-dbcp</groupId>
		<artifactId>commons-dbcp</artifactId>
		<version>1.4</version>
	</dependency>
	
	<!-- 
			MySQL Connector dependency
	 -->        
	<dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>5.1.9</version>
	</dependency>
	
	<!-- GSON --> 
   	<dependency>
		<groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.2.2</version>
    </dependency>
    
    <!--  JSTL and Tag Libs -->
    <dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
		<scope>runtime</scope>
	</dependency>	
	<dependency>
		<groupId>taglibs</groupId>
		<artifactId>standard</artifactId>
		<version>1.1.2</version>
		<scope>runtime</scope>
	</dependency>
	<!--  itext and POI  -->
	<dependency>
       <groupId>com.itextpdf</groupId>
       <artifactId>itextpdf</artifactId>
       <version>5.0.6</version>
    </dependency>    
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactId>
		<version>3.13</version>
	</dependency>	
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>3.13</version>
	</dependency>
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml-schemas</artifactId>
		<version>3.13</version>
	</dependency>
	<dependency> 
	  <groupId>displaytag</groupId>
	  <artifactId>displaytag</artifactId>
	  <version>1.2</version>
   </dependency>
   <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.3.1</version>
    </dependency>
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.4</version>
     </dependency>
     <dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.12</version>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>jcl-over-slf4j</artifactId>
		<version>1.7.12</version>
	</dependency>
  	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.7.12</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/javax.mail/mail -->
	<dependency>
    	<groupId>javax.mail</groupId>
    	<artifactId>mail</artifactId>
    	<version>1.4</version>
	</dependency>
  </dependencies>
  <build>
    <finalName>ADA</finalName>
  </build>
</project>


<!-- login feature with spring security -->
<form name="loginForm" action="<c:url value='/auth/login_check?targetUrl=${targetUrl}'/>" method="POST">
				<div class="login-wrap">
					<div class="login-html">
						<div class="login">Login</div><br>
						<div class="login-form">
							<div class="sign-in-htm">
								<div class="group">
									<label for="user" class="label">Username</label>
									<input type="text" name="username" class="input">
								</div>
								<div class="group">
									<label for="pass" class="label">Password</label>
									<input type="password" name="password" class="input">
								</div><br>
								<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
								<div class="group">
									<input type="submit" class="button" value="Login">
								</div><br>
								<div class="foot-lnk ariztid-margin-bottom">
									<a href="#">Forgot Password?</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</form>
      
    <!-- logout feature -->
    <c:if test="${pageContext.request.userPrincipal.name != null}">
    
    call this function
    formSubmit()
    ...
    
    <form action="${logoutUrl}" method="post" id="logoutForm">
		<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
	</form>
	<script>
			function formSubmit() {	document.getElementById("logoutForm").submit();	}
	</script>
    </c:if>
